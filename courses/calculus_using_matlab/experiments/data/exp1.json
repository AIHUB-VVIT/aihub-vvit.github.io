{
  "title": "1.First & Second Order Derivatives",
  "slides": [
    { "part": "A", "topic": "[1/15]:Defining Symbolic Variables", "code": "%Step 1: Define x as a symbolic variable\n% MATLAB2014b\nclear all\nclose all\nclc\n% Define symbolic variable\nsyms x\nwhos", "output": "Name\t      Size  \t          Bytes \t Class  \t   Attributes\n\n  g \t        1x1\t               112   \t  symfun              \n  t          1x1  \t             112 \t    sym ", "explanation": [ "clear all clears all variables from memory.", "close all closes any open figure windows.", "clc clears the command window.", "syms x creates a symbolic variable x for symbolic math operations."] },
    { "part": "A", "topic": "[2/15]:Defining the Function", "code": "% Step 2: Define the function\n% f = t^3 - 2*t^2 + 5*t - 1;\nf = x^3 - 2*x^2 + 5*x - 1;\ndisp('The given function f(x) is ');\ndisp(f)", "output": "The given function f(x) is  \nx^3 - 2*x^2 + 5*x - 1", "explanation": [ "The function f(x) is defined symbolically using the declared variable x.", "disp displays the function expression to the command window so that the user can verify the definition."] },
    { "part": "A", "topic": "[3/15]:Computing Derivatives", "code": "%Step 3: Compute the First derivative\ndf_dx = diff(f);\nfprintf('First derivative f''(x) =  %s\\n', char(df_dx));", "output": "First derivative f'(x) =  3*x^2 - 4*x + 5", "explanation": [ "diff(f) computes the first derivative of f(x) with respect to x.", "char(df_dx) converts the symbolic result into a string.", "fprintf displays the derivative nicely formatted in the command window."] },
    { "part": "A", "topic": "[4/15]:Computing Derivatives", "code": "%Step4: Second derivative\nd2f_dx2 = diff(f, 2); % Or diff(df_dx)\nfprintf('Second derivative f''''(x) =  %s\\n', char(d2f_dx2));", "output": "Second derivative f''(x) =  6*x - 4", "explanation": [ "diff(f, 2) computes the second derivative (i.e., the derivative of the first derivative).", "Four single quotes '''' are used in the fprintf to display double prime notation (f''(x)) in MATLAB.", "char again converts the symbolic expression to string for display."] },
    { "part": "A", "topic": "[5/15]:Evaluating Derivatives", "code": "% You can also evaluate the derivatives at specific points\nx_val = 2;\ndf_dx_at_2 = subs(df_dx, x, x_val);\n% disp will display numbers directly\ndisp(['First derivative f''(', num2str(x_val), ') = ', num2str(double(df_dx_at_2))]);\n\nd2f_dx2_at_2 = subs(d2f_dx2, x, x_val);\n% disp will display numbers directly\ndisp(['Second derivative f''''(', num2str(x_val), ') = ', num2str(double(df_dx_at_2))]);", "output": "First derivative f'(2) = 9\nSecond derivative f''(2) = 8<br><img src='exp1.png' alt='exp1 plot' style='max-width:100%;height:auto;'>", "explanation": [ "subs(expr, x, x_val) substitutes x = 2 into the symbolic expressions f, f' and f''.", "double(...) converts the symbolic value into a numeric value.", "disp(...) is used to display the evaluated result for each function at the point x = 2."] },
    { "part": "A", "topic": "[6/15]:Defining Symbolic Functions", "code": "% MATLAB2014b\nclear all\nclose all\nclc\n% Define symbolic variable\nsyms g(t)\nwhos", "output": "Name      Size            Bytes  Class     Attributes\n\ng         1x1               112     symfun              \nt         1x1               112     sym ", "explanation": [ "clear all clears all variables from memory.", "close all closes any open figure windows.", "clc clears the command window.", "syms g(t) defines g(t) as a symbolic function of variable t, enabling symbolic operations (like differentiation)."] },
    { "part": "A", "topic": "[7/15]:Defining Symbolic Functions", "code": "% Define the function\ng(t) = input('Enter your function g(t) = ');\ndisp('The given function g(t) = ');\ndisp(g(t))", "output": "Enter your function g(t) = sin(t^2)\nThe given function g(t) = sin(t^2)", "explanation": [ "input() prompts the user to enter a function, like sin(t^2) or sin(t).", "For example, when the user enters sin(t), it assigns that to the symbolic function g(t).", "disp() displays the entered function to confirm the correct input."] },
    { "part": "B", "topic": "[8/15]:Computing Derivatives", "code": "% First derivative\ndg_dt = diff(g);\nfprintf('First derivative g''(t) =  %s\\n', char(dg_dt));", "output": "First derivative g'(t) =  2*t*cos(t^2)", "explanation": [ "diff(g) calculates the first derivative of the symbolic function g(t) with respect to t.", "char(dg_dt) converts the symbolic expression to a string format for display.", "fprintf() prints the result in a readable format (with g'(t) notation)."] },
    { "part": "B", "topic": "[9/15]:Evaluating Derivatives", "code": "% You can also evaluate the derivatives at specific points\nt_val = input('Enter the value of t at which first derivative to be evaluated: ');\ndg_dt_at_t = subs(dg_dt, t, t_val);\n% disp will display numbers directly\ndisp(['First derivative g''(', num2str(t_val), ') = ', num2str(double(dg_dt_at_t))]);", "output": "Enter the value of t at which first derivative to be evaluated: pi/3\nFirst derivative g'(1.0472) = 0.95631", "explanation": [ "The user is prompted to enter a value for t (e.g., pi/3).", "subs(dg_dt, t, t_val) substitutes the value into the first derivative.", "double() converts the symbolic result to a numerical value.", "disp() prints the evaluated first derivative."] },
    { "part": "B", "topic": "[10/15]:Computing Derivatives", "code": "% Second derivative\nd2g_dt2 = diff(g, 2); % Or diff(dg_dt)\nfprintf('Second derivative g''''(t) =  %s\\n', char(d2g_dt2));", "output": "Second derivative g''(t) =  2*cos(t^2) - 4*t^2*sin(t^2)", "explanation": [ "diff(g, 2) computes the second derivative of g(t) (i.e., derivative of the first derivative).", "char() again converts it to a string for display.", "fprintf() prints it using the g''(t) notation (note that '''' escapes to show '' in the output)."] },
    { "part": "B", "topic": "[11/15]:Evaluating Derivatives", "code": "% You can also evaluate the derivatives at specific points\nt_val = input('Enter the value of t at which second derivative to be evaluated: ');\nd2g_dt2_at_t = subs(d2g_dt2, t, t_val);\n% disp will display numbers directly\ndisp(['Second derivative g''''(', num2str(t_val), ') = ', num2str(double(d2g_dt2_at_t))]);", "output": "Enter the value of t at which second derivative to be evaluated: pi/3\nSecond derivative g''(1.0472) = -2.9893", "explanation": [ "The user is again prompted to enter a value for t.", "subs() substitutes that value into the second derivative expression.", "double() computes the numerical result.", "disp() displays the evaluated second derivative."] },
    { "part": "B", "topic": "[12/15]:Working with Data", "code": "clear all\nclose all\nclc\n% Sample data\nx_data = 0:0.1:10;\ny_data = x_data.^2; % Let's pretend this is experimental data from y = x^2", "output": "", "explanation": [ "clear all clears all variables from memory.", "close all closes any open figure windows.", "clc clears the command window.", "x_data contains regularly spaced x-values.", "y_data = x^2 generates corresponding y-values."] },
    { "part": "B", "topic": "[13/15]:Working with Data", "code": "% First derivative (approximation)\ndy_dx_approx = diff(y_data) ./ diff(x_data);\n% The length of dy_dx_approx will be one less than x_data and y_data", "output": "", "explanation": [ "This line estimates the first derivative (slope) between data points using finite differences.", "diff(y_data) gives changes in y, diff(x_data) gives changes in x, and ./ performs element-wise division (Δy/Δx)."] },
    { "part": "B", "topic": "[14/15]:Working with Data", "code": "% To plot it, you might want to use the midpoint of each x interval.\nx_midpoints = (x_data(1:end-1) + x_data(2:end)) / 2;", "output": "", "explanation": [ "dy/dx values correspond to intervals between x-values.", "x_midpoints gives the center of each interval so we can accurately plot the derivative values."] },
    { "part": "B", "topic": "[15/15]:Working with Data", "code": "% Second derivative (approximation)\n% Apply diff again to the approximated first derivative\nd2y_dx2_approx = diff(dy_dx_approx) ./ diff(x_midpoints);", "output": "", "explanation": [ "The same diff logic is applied again on the first derivative to get second derivative.", "Since dy_dx_approx is shorter than x_data, its own diff result is one step shorter again, so x_midpoints2 is calculated from x_midpoints."] }
  ]
} 